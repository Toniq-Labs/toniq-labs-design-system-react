(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{"./src/elements/toniq-toggle-button/toniq-toggle-button.story.tsx":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,"mainStory",(function(){return mainStory}));__webpack_require__("./node_modules/core-js/modules/es.object.assign.js"),__webpack_require__("./node_modules/core-js/modules/es.array.concat.js"),__webpack_require__("./node_modules/core-js/modules/es.array.map.js"),__webpack_require__("./node_modules/core-js/modules/es.array.find.js"),__webpack_require__("./node_modules/core-js/modules/es.array.is-array.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.description.js"),__webpack_require__("./node_modules/core-js/modules/es.object.to-string.js"),__webpack_require__("./node_modules/core-js/modules/es.symbol.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.string.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.iterator.js"),__webpack_require__("./node_modules/core-js/modules/web.dom-collections.iterator.js"),__webpack_require__("./node_modules/core-js/modules/es.array.from.js"),__webpack_require__("./node_modules/core-js/modules/es.array.slice.js"),__webpack_require__("./node_modules/core-js/modules/es.function.name.js");var react__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__("./node_modules/react/index.js"),_icons__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__("./src/icons/index.ts"),_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__("./src/storybook-helpers/actions.ts"),_storybook_helpers_standard_controls__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__("./src/storybook-helpers/standard-controls.ts"),_styles__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__("./src/styles/index.ts"),_styles_css_to_react__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__("./src/styles/css-to-react.ts"),_react_components__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__("./src/elements/react-components.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__("./node_modules/react/jsx-runtime.js");function _slicedToArray(arr,i){return function _arrayWithHoles(arr){if(Array.isArray(arr))return arr}(arr)||function _iterableToArrayLimit(arr,i){var _i=null==arr?null:"undefined"!=typeof Symbol&&arr[Symbol.iterator]||arr["@@iterator"];if(null==_i)return;var _s,_e,_arr=[],_n=!0,_d=!1;try{for(_i=_i.call(arr);!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{_n||null==_i.return||_i.return()}finally{if(_d)throw _e}}return _arr}(arr,i)||_unsupportedIterableToArray(arr,i)||function _nonIterableRest(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function _unsupportedIterableToArray(o,minLen){if(o){if("string"==typeof o)return _arrayLikeToArray(o,minLen);var n=Object.prototype.toString.call(o).slice(8,-1);return"Object"===n&&o.constructor&&(n=o.constructor.name),"Map"===n||"Set"===n?Array.from(o):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_arrayLikeToArray(o,minLen):void 0}}function _arrayLikeToArray(arr,len){(null==len||len>arr.length)&&(len=arr.length);for(var i=0,arr2=new Array(len);i<len;i++)arr2[i]=arr[i];return arr2}var toggleButtonStoryControls=Object.assign({},_storybook_helpers_standard_controls__WEBPACK_IMPORTED_MODULE_18__.a,{text:{table:{disable:!0}},icon:{table:{disable:!0}},iconControl:{name:"24px Icon",control:"select",options:["None"].concat(function _toConsumableArray(arr){return function _arrayWithoutHoles(arr){if(Array.isArray(arr))return _arrayLikeToArray(arr)}(arr)||function _iterableToArray(iter){if("undefined"!=typeof Symbol&&null!=iter[Symbol.iterator]||null!=iter["@@iterator"])return Array.from(iter)}(arr)||_unsupportedIterableToArray(arr)||function _nonIterableSpread(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}(_icons__WEBPACK_IMPORTED_MODULE_16__.j["core-24"].map((function(icon){return icon.iconName}))))},hostClass:{name:"Host Class",control:"select",options:["None","toniq-toggle-button-text-only"]},active:{table:{disable:!0}},textControl:{name:"Text",control:"text"}}),componentStoryMeta={title:"Elements/Toniq Toggle Button",component:_react_components__WEBPACK_IMPORTED_MODULE_21__.k,argTypes:toggleButtonStoryControls,args:{textControl:"Custom text here",iconControl:"None",hostClass:"None"}};__webpack_exports__.default=componentStoryMeta;var toggleButtonStatesInit={true:{default:!0,defaultWithIcon:!0,defaultIconOnly:!0,textOnly:!0,withIcon:!0,iconOnly:!0},false:{default:!1,defaultWithIcon:!1,defaultIconOnly:!1,textOnly:!1,withIcon:!1,iconOnly:!1},custom:!1},mainStory=function mainStory(controls){var customText=String(controls.textControl),customIcon=_icons__WEBPACK_IMPORTED_MODULE_16__.j["core-24"].find((function(icon){return icon.iconName===controls.iconControl})),_useReducer2=_slicedToArray(Object(react__WEBPACK_IMPORTED_MODULE_15__.useReducer)((function(state,_ref){var _Object$assign,_Object$assign2,key=_ref.key,subKey=_ref.subKey;if("custom"===key)return Object.assign({},state,{custom:!state.custom});if(void 0!==subKey)return Object.assign({},state,((_Object$assign2={})[key]=Object.assign({},state[key],((_Object$assign={})[subKey]=!state[key][subKey],_Object$assign)),_Object$assign2));throw new Error("Key was not custom but subKey was not defined.")}),toggleButtonStatesInit),2),toggleButtonStates=_useReducer2[0],updateToggleButtonStates=_useReducer2[1];function generateSection(active){var title="Initially "+(active?"Active":"Inactive"),stateProp=String(active),states=toggleButtonStates[stateProp];return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.Fragment,{children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("h3",{style:Object.assign({},Object(_styles_css_to_react__WEBPACK_IMPORTED_MODULE_20__.a)(_styles__WEBPACK_IMPORTED_MODULE_19__.g.h3Font)),children:title}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)("section",{style:{display:"flex",gap:"8px"},children:[Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{onClick:function onClick(event){updateToggleButtonStates({key:stateProp,subKey:"default"}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},text:"Toggle Me",toggled:states.default}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{onClick:function onClick(event){updateToggleButtonStates({key:stateProp,subKey:"defaultWithIcon"}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},icon:_icons__WEBPACK_IMPORTED_MODULE_16__.h,text:"With icon",toggled:states.defaultWithIcon}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{onClick:function onClick(event){updateToggleButtonStates({key:stateProp,subKey:"defaultIconOnly"}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},icon:_icons__WEBPACK_IMPORTED_MODULE_16__.h,title:"Icon only",toggled:states.defaultIconOnly}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{className:"toniq-toggle-button-text-only",onClick:function onClick(event){updateToggleButtonStates({key:stateProp,subKey:"textOnly"}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},text:"Text Only",toggled:states.textOnly}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{className:"toniq-toggle-button-text-only",onClick:function onClick(event){updateToggleButtonStates({key:stateProp,subKey:"withIcon"}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},icon:_icons__WEBPACK_IMPORTED_MODULE_16__.h,text:"With Icon",toggled:states.withIcon}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{className:"toniq-toggle-button-text-only",onClick:function onClick(event){updateToggleButtonStates({key:stateProp,subKey:"iconOnly"}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},title:"icon only",icon:_icons__WEBPACK_IMPORTED_MODULE_16__.h,toggled:states.iconOnly})]})]})}return Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsxs)(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.Fragment,{children:[generateSection(!1),generateSection(!0),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)("h3",{style:Object.assign({},Object(_styles_css_to_react__WEBPACK_IMPORTED_MODULE_20__.a)(_styles__WEBPACK_IMPORTED_MODULE_19__.g.h3Font)),children:"Custom Inputs"}),Object(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_22__.jsx)(_react_components__WEBPACK_IMPORTED_MODULE_21__.k,{className:controls.hostClass,onClick:function onClick(event){updateToggleButtonStates({key:"custom",subKey:void 0}),Object(_storybook_helpers_actions__WEBPACK_IMPORTED_MODULE_17__.a)(event)},icon:customIcon,text:customText,toggled:toggleButtonStates.custom})]})};mainStory.storyName="Toniq Toggle Button",mainStory.parameters=Object.assign({storySource:{source:"(\n    controls: Record<keyof typeof toggleButtonStoryControls, string | boolean>,\n) => {\n    const customText = String(controls.textControl);\n    const customIcon = allIconsByCategory['core-24'].find(\n        (icon) => icon.iconName === controls.iconControl,\n    );\n\n    const [\n        toggleButtonStates,\n        updateToggleButtonStates,\n    ] = useReducer(\n        (\n            state: ToggleButtonStoryState,\n            {\n                key,\n                subKey,\n            }: {\n                key: keyof ToggleButtonStoryState;\n                subKey: BooleanSubKeys | undefined;\n            },\n        ): ToggleButtonStoryState => {\n            if (key === 'custom') {\n                return {...state, custom: !state.custom};\n            } else if (subKey !== undefined) {\n                return {\n                    ...state,\n                    [key]: {\n                        ...state[key],\n                        [subKey]: !state[key][subKey],\n                    },\n                };\n            } else {\n                throw new Error(`Key was not custom but subKey was not defined.`);\n            }\n        },\n        toggleButtonStatesInit,\n    );\n\n    function generateSection(active: boolean) {\n        const title = `Initially ${active ? 'Active' : 'Inactive'}`;\n        const stateProp = String(active) as 'true' | 'false';\n        const states = toggleButtonStates[stateProp];\n\n        const what: Writeable<ComponentProps<typeof ToniqToggleButton>> = {} as any;\n        what.onClick = (event) => {};\n\n        return (\n            <>\n                <h3\n                    style={{\n                        ...cssToReactStyleObject(toniqFontStyles.h3Font),\n                    }}\n                >\n                    {title}\n                </h3>\n                <section style={{display: 'flex', gap: '8px'}}>\n                    <ToniqToggleButton\n                        onClick={(event) => {\n                            updateToggleButtonStates({\n                                key: stateProp,\n                                subKey: 'default',\n                            });\n                            handleEventAsAction(event);\n                        }}\n                        text=\"Toggle Me\"\n                        toggled={states.default}\n                    />\n                    <ToniqToggleButton\n                        onClick={(event: UIEvent) => {\n                            updateToggleButtonStates({\n                                key: stateProp,\n                                subKey: 'defaultWithIcon',\n                            });\n                            handleEventAsAction(event);\n                        }}\n                        icon={Rocket24Icon}\n                        text=\"With icon\"\n                        toggled={states.defaultWithIcon}\n                    />\n                    <ToniqToggleButton\n                        onClick={(event: UIEvent) => {\n                            updateToggleButtonStates({\n                                key: stateProp,\n                                subKey: 'defaultIconOnly',\n                            });\n                            handleEventAsAction(event);\n                        }}\n                        icon={Rocket24Icon}\n                        title=\"Icon only\"\n                        toggled={states.defaultIconOnly}\n                    />\n                    <ToniqToggleButton\n                        className=\"toniq-toggle-button-text-only\"\n                        onClick={(event: UIEvent) => {\n                            updateToggleButtonStates({\n                                key: stateProp,\n                                subKey: 'textOnly',\n                            });\n                            handleEventAsAction(event);\n                        }}\n                        text=\"Text Only\"\n                        toggled={states.textOnly}\n                    />\n                    <ToniqToggleButton\n                        className=\"toniq-toggle-button-text-only\"\n                        onClick={(event: UIEvent) => {\n                            updateToggleButtonStates({\n                                key: stateProp,\n                                subKey: 'withIcon',\n                            });\n                            handleEventAsAction(event);\n                        }}\n                        icon={Rocket24Icon}\n                        text=\"With Icon\"\n                        toggled={states.withIcon}\n                    />\n                    <ToniqToggleButton\n                        className=\"toniq-toggle-button-text-only\"\n                        onClick={(event: UIEvent) => {\n                            updateToggleButtonStates({\n                                key: stateProp,\n                                subKey: 'iconOnly',\n                            });\n                            handleEventAsAction(event);\n                        }}\n                        title=\"icon only\"\n                        icon={Rocket24Icon}\n                        toggled={states.iconOnly}\n                    />\n                </section>\n            </>\n        );\n    }\n\n    return (\n        <>\n            {generateSection(false)}\n            {generateSection(true)}\n\n            <h3\n                style={{\n                    ...cssToReactStyleObject(toniqFontStyles.h3Font),\n                }}\n            >\n                Custom Inputs\n            </h3>\n            <ToniqToggleButton\n                className={controls.hostClass as string}\n                onClick={(event: UIEvent) => {\n                    updateToggleButtonStates({\n                        key: 'custom',\n                        subKey: undefined,\n                    });\n                    handleEventAsAction(event);\n                }}\n                icon={customIcon}\n                text={customText}\n                toggled={toggleButtonStates.custom}\n            />\n        </>\n    );\n}"}},mainStory.parameters);try{ComponentMeta.displayName="ComponentMeta",ComponentMeta.__docgenInfo={description:"For the common case where a component's stories are simple components that receives args as props:\n\n```tsx\nexport default { ... } as ComponentMeta<typeof Button>;\n```",displayName:"ComponentMeta",props:{}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/elements/toniq-toggle-button/toniq-toggle-button.story.tsx#ComponentMeta"]={docgenInfo:ComponentMeta.__docgenInfo,name:"ComponentMeta",path:"src/elements/toniq-toggle-button/toniq-toggle-button.story.tsx#ComponentMeta"})}catch(__react_docgen_typescript_loader_error){}try{mainStory.displayName="mainStory",mainStory.__docgenInfo={description:"",displayName:"mainStory",props:{text:{defaultValue:null,description:"",name:"text",required:!0,type:{name:"string | boolean"}},icon:{defaultValue:null,description:"",name:"icon",required:!0,type:{name:"string | boolean"}},className:{defaultValue:null,description:"",name:"className",required:!0,type:{name:"string | boolean"}},style:{defaultValue:null,description:"",name:"style",required:!0,type:{name:"string | boolean"}},hostClass:{defaultValue:null,description:"",name:"hostClass",required:!0,type:{name:"string | boolean"}},iconControl:{defaultValue:null,description:"",name:"iconControl",required:!0,type:{name:"string | boolean"}},active:{defaultValue:null,description:"",name:"active",required:!0,type:{name:"string | boolean"}},textControl:{defaultValue:null,description:"",name:"textControl",required:!0,type:{name:"string | boolean"}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/elements/toniq-toggle-button/toniq-toggle-button.story.tsx#mainStory"]={docgenInfo:mainStory.__docgenInfo,name:"mainStory",path:"src/elements/toniq-toggle-button/toniq-toggle-button.story.tsx#mainStory"})}catch(__react_docgen_typescript_loader_error){}},"./src/storybook-helpers/actions.ts":function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",(function(){return handleEventAsAction}));var _storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/@storybook/addon-actions/dist/esm/index.js");function handleEventAsAction(event){var actionType=Object(_storybook_addon_actions__WEBPACK_IMPORTED_MODULE_0__.action)(event.type);event instanceof CustomEvent?actionType({detail:event.detail,fullEvent:event}):actionType(event)}}}]);